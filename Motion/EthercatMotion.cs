using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ACS.SPiiPlusNET;

namespace Motion
{
    public class EthercatMotion
    {
        /// <summary>
        /// The ACS controller.
        /// </summary>
        private Api Ch;

        public Motor MotorX1 { get; set; }
        public Motor MotorX2 { get; set; }
        public Motor MotorZ { get; set; }
        public Motor MotorY { get; set; }
        public Motor MotorR { get; set; }

        public EthercatMotion(Api Controller)
        {
            Ch = Controller;
        }

        public void Setup()
        {
            MotorX1.EncCtsPerR = 131072;
            MotorX1.BallScrewLead = 16;
            MotorX1.EncoderFactor = MotorX1.EncCtsPerR / MotorX1.BallScrewLead;
            //Ch.WriteVariable()


        }

        private void DeclareVariableInDBuffer()
        {
            string NewLine = Environment.NewLine;
            string Warning = "! Warning, generated by Host for Motor Abs Position, do not change." + NewLine;



            string inputDefine = string.Empty;
            for (int i = 0; i < InputModuleNum; i++)
            {
                inputDefine += GlobalDefine + GetInputName(i) + NewLine;
            }

            string outputDefine = string.Empty;
            for (int i = 0; i < OutputModuleNum; i++)
            {
                outputDefine += GlobalDefine + GetOutputName(i) + NewLine;
            }

            string program = Warning + inputDefine + outputDefine;
            ProgramBuffer DBuffer = (ProgramBuffer)(Convert.ToInt16(Ch.GetDBufferIndex()));
            Ch.LoadBuffer(DBuffer, program);

            Ch.CompileBuffer(DBuffer);
        }

        public void SetPosition(Motor motor, double position)
        {

        }

        public void SetVelocity(Motor motor, double velocity)
        {
            Ch.SetVelocity(motor.Id, velocity);
        }
        public void SetAcceleration(Motor motor, double acceleration) { }
        public void SetDeceleration(Motor motor, double deceleration) { }
        public void SetJerk(Motor motor, double jerk) { }
        public double GetPosition(Motor motor) { return 0; }
        public double GetVelocity(Motor motor) { return 0; }
        public double GetAcceleration(Motor motor) { return 0; }
        public double GetDeceleration(Motor motor) { return 0; }
        public double GetJerk(Motor motor) { return 0; }

        public void Enable(Motor motor) { }
        public void Disable(Motor motor) { }
        public void Jog(Motor motor, double velocity) { }
        public void Kill(Motor motor) { }
        public void ToPoint(Motor motor, int mode, double point) { }

        public void Estop()
        {

        }
    }
}
